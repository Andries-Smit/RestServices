// This file was generated by Mendix Business Modeler 4.0.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package communitycommons.actions;

import com.mendix.systemwideinterfaces.core.UserAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import communitycommons.ORM;

/**
 * Clones objects, their associations and even referred objects. 
 * 
 * - Source: the original object to copy
 * - Target: the object to copy it into (should be of the same type, or a specialization)
 * - MembersToSkip: members which should not  be set at all
 * - MembersToKeep: references which should be set, but not cloned. (so source and target will refer to exactly the same object). If an association is not part of this property, it will be cloned.
 * - ReverseAssociations: 1 - 0 assications which refer to target, which will be cloned as well. Only the reference name itself needs to be mentioned.
 * 
 * members format: <membername> or <module.association> or <module.objecttype/membername>, where objecttype is the concrete type of the object being cloned. 
 * 
 * reverseAssociation: 
 * <module.relation>
 * 
 * membersToSkip by automatically contains createdDate and changedDate. 
 * membersToKeep by automatically contains System.owner and System.changedBy
 * 
 * Note that DeepClone does commit all objects, where Clone does not.
 */
public class DeepClone extends UserAction<Boolean>
{
	private IMendixObject source;
	private IMendixObject target;
	private String membersToSkip;
	private String membersToKeep;
	private String reverseAssociations;

	public DeepClone(IMendixObject source, IMendixObject target, String membersToSkip, String membersToKeep, String reverseAssociations)
	{
		super();
		this.source = source;
		this.target = target;
		this.membersToSkip = membersToSkip;
		this.membersToKeep = membersToKeep;
		this.reverseAssociations = reverseAssociations;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		ORM.deepClone(getContext(), source, target, membersToSkip, membersToKeep, reverseAssociations);
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "DeepClone";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
