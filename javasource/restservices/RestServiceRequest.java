package restservices;

import java.io.IOException;
import java.io.PrintWriter;


import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.Response;
import org.json.JSONWriter;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;

public class RestServiceRequest {
	public static enum ContentType { JSON, XML, HTML }

	private PublishedService service;
	Request request;
	Response response;
	private ContentType contentType = ContentType.JSON;
	private IContext context;
	private PrintWriter writer;
	protected JSONWriter jsonwriter;

	public RestServiceRequest(PublishedService service, Request request, Response response) {
		this.service = service;
		this.request = request;
		this.response = response;
		this.context = Core.createSystemContext(); //TODO: should be based on user credentials if access was required?
		
		this.contentType = determineContentType(request);
		setResponseContentType(response, contentType);

		try {
			this.writer =new PrintWriter(response.getOutputStream());
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		this.jsonwriter = new JSONWriter(writer);
	}

	public static ContentType determineContentType(Request request) {
		if (request.getParameter(Constants.CONTENTTYPE_PARAM) != null)
			return ContentType.valueOf(request.getParameter(Constants.CONTENTTYPE_PARAM).toUpperCase());
		String ct = request.getHeader(Constants.ACCEPT_HEADER);
		if (ct != null) {
			if (ct.contains("text/json"))
				return ContentType.JSON;
			if (ct.contains("html"))
				return ContentType.HTML;
			if (ct.contains("xml")) 
				return ContentType.XML;
		}
		return ContentType.JSON; //by default
	}
	
	public static void setResponseContentType(Response response, ContentType contentType) {
		response.setContentType("text/" + contentType.toString().toLowerCase()+ "; charset=UTF-8");
	}
	
	public ContentType getContentType() {
		return this.contentType;
	}
	
	public RestServiceRequest write(String data) {
		this.writer.print(data);
		return this;
	}

	public IContext getContext() {
		return this.context;
	}

	public void close() {
		this.writer.close();
	}

	public void startHTMLDoc() {
		this.write("<!DOCTYPE HTML><html><head><style>" + Constants.STYLESHEET + "</style><head><body>");		
	}


	public void endHTMLDoc() {
		this.write("<hr /><center><small>Generated by the Mendix RestServices module</small></center></body></html>");
	}

	public void startXMLDoc() {
		this.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
	}

	public void setStatus(int status) {
		response.setStatus(status);
	}

	public String autoGenerateLink(String value) {
		if (value != null && (value.startsWith("http://") || value.startsWith("https://")))
			return "<a href='"+ value+ "'>" + value+ "</a>";
		return value;
	}

	public void serveServiceOverview() {
		switch(contentType) {
		case JSON:
			jsonwriter.object();
			jsonwriter
				.key("RestServices").value(RestServices.VERSION)
				.key("services").array();
			break;
		case XML:
			startXMLDoc();
			write("<RestServices><version>").write(RestServices.VERSION).write("</version><services>");
			break;
		case HTML:
			startHTMLDoc();
			write("<h1>RestServices</h1><br />Version: ").write(RestServices.VERSION).write("<h3>Available services</h3>");
		}
		
		for (PublishedService service : RestServices.services.values())
			service.serveServiceDescription(this);
		
		switch(contentType) {
		case JSON:
			jsonwriter.endArray().endObject();
			break;
		case XML:
			write("</services></RestServices>");
			break;
		case HTML:
			endHTMLDoc();
				
		}
		close();
	}
}
